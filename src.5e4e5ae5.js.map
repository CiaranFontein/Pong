{"version":3,"sources":["src/settings.js","src/partials/board.js","src/partials/paddle.js","src/partials/trail.js","src/partials/ball.js","src/partials/score.js","src/partials/Game.js","src/index.js"],"names":["KEYS","a","z","up","down","spaceBar","SVG_NS","Board","width","height","className","svg","rect","document","createElementNS","setAttributeNS","line","appendChild","paddleAcceleration","Paddle","boardHeight","x","y","upKey","downKey","speed","score","againstTopEdge","againstBotEdge","keyState","addEventListener","event","key","update","move","force","slowToZero","Trail","length","balls","ball","push","TrailBall","radius","Math","random","shift","shrinkBalls","i","renderCircleOfTrail","circle","getRandomColor","j","velocity","acceleration","letters","color","floor","Ball","boardLength","sqrt","startingSpeed","theta","xFlipped","yFlipped","spinSpeed","accelerationSpeed","trail","ping","Audio","pingSound","direction","reset","paddle1","paddle2","render","wallCollision","paddleCollision","rightGoal","leftGoal","goal","spin","cos","sin","hitTop","hitBottom","player1","player2","PI","play","applySpin","paddleSpeed","applyRotationalFrictionToZero","player","Score","size","text","textContent","paddleHeight","paddleWidth","paddlePadding","boardClassName","ballRadius","ballVelocity","p1Up","p1Down","p2Up","p2Down","Game","element","gameElement","getElementById","board","score1","score2","paused","innerHTML","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.5e4e5ae5.js","sourceRoot":"..","sourcesContent":["export const KEYS = {\n  a: \"a\", // player 1 up key\n  z: \"z\", // player 1 down key\n  up: \"ArrowUp\", // player 2 up key\n  down: \"ArrowDown\", // player 2 down key\n  spaceBar: \" \" // we'll use this later...\n};\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n  constructor(width, height, className) {\n    this.width = width;\n    this.height = height;\n    this.className = className;\n  }\n\n  render(svg) {\n    let rect = document.createElementNS(SVG_NS, \"rect\");\n    rect.setAttributeNS(null, \"class\", this.className);\n    rect.setAttributeNS(null, \"width\", this.width);\n    rect.setAttributeNS(null, \"height\", this.height);\n\n    let line = document.createElementNS(SVG_NS, \"line\");\n    line.setAttributeNS(null, \"x1\", this.width / 2);\n    line.setAttributeNS(null, \"x2\", this.width / 2);\n    line.setAttributeNS(null, \"y1\", 0);\n    line.setAttributeNS(null, \"y2\", this.height);\n    line.setAttributeNS(null, \"stroke\", \"white\");\n    line.setAttributeNS(null, \"stroke-dasharray\", \"20\");\n    line.setAttributeNS(null, \"stroke-width\", \"4\");\n\n    svg.appendChild(rect);\n    svg.appendChild(line);\n  }\n}\n","import { SVG_NS, KEYS } from \"../settings\";\n\nlet paddleAcceleration = 0.5;\n\nexport default class Paddle {\n  constructor(boardHeight, width, height, x, y, upKey, downKey) {\n    this.boardHeight = boardHeight;\n    this.width = width;\n    this.height = height;\n    this.x = x;\n    this.y = y;\n    this.speed = 0;\n    this.score = 0;\n    this.upKey = upKey;\n    this.downKey = downKey;\n    this.againstTopEdge = false;\n    this.againstBotEdge = false;\n\n    this.keyState = {};\n\n    document.addEventListener(\"keydown\", event => {\n      this.keyState[event.key] = true;\n    });\n\n    document.addEventListener(\"keyup\", event => {\n      this.keyState[event.key] = false;\n    });\n  }\n\n  render(svg) {\n    this.update();\n    if (\n      this.keyState[KEYS.a] &&\n      this.upKey === KEYS.a &&\n      !this.againstTopEdge\n    ) {\n      this.move(-paddleAcceleration);\n    }\n    if (\n      this.keyState[KEYS.up] &&\n      this.upKey === KEYS.up &&\n      !this.againstTopEdge\n    ) {\n      this.move(-paddleAcceleration);\n    }\n\n    if (\n      this.keyState[KEYS.z] &&\n      this.downKey === KEYS.z &&\n      !this.againstBotEdge\n    ) {\n      this.move(paddleAcceleration);\n    }\n\n    if (\n      this.keyState[KEYS.down] &&\n      this.downKey === KEYS.down &&\n      !this.againstBotEdge\n    ) {\n      this.move(paddleAcceleration);\n    }\n\n    let rect = document.createElementNS(SVG_NS, \"rect\");\n    rect.setAttributeNS(null, \"class\", this.className);\n    rect.setAttributeNS(null, \"width\", this.width);\n    rect.setAttributeNS(null, \"height\", this.height);\n    rect.setAttributeNS(null, \"x\", this.x);\n    rect.setAttributeNS(null, \"y\", this.y);\n    rect.setAttributeNS(null, \"speed\", this.speed);\n    rect.setAttributeNS(null, \"score\", this.score);\n    rect.setAttributeNS(null, \"fill\", \"white\");\n\n    svg.appendChild(rect);\n  }\n\n  move(force) {\n    this.speed += force;\n  }\n\n  update() {\n    if (this.y + this.speed <= 0) {\n      this.againstTopEdge = true;\n      this.speed = -this.speed * 0.5;\n    } else if (this.y + this.speed >= this.boardHeight - this.height) {\n      this.againstBotEdge = true;\n      this.speed = -this.speed * 0.5;\n    } else {\n      this.againstBotEdge = false;\n      this.againstTopEdge = false;\n      this.y += this.speed;\n    }\n    this.slowToZero();\n  }\n\n  slowToZero() {\n    if (this.speed > 0) {\n      this.speed -= 0.05;\n    } else if (this.speed < 0) {\n      this.speed += 0.05;\n    }\n  }\n}\n","import { SVG_NS } from \"../settings\";\n\nexport default class Trail {\n  constructor(length) {\n    this.length = length;\n    this.balls = [];\n  }\n\n  render(svg, ball) {\n    //Creates new TrailBall at location of ball\n    this.balls.push(\n      new TrailBall(ball.x, ball.y, ball.radius, [\n        Math.random() - 0.5,\n        Math.random() - 0.5\n      ])\n    );\n    if (this.balls.length > this.length) {\n      this.balls.shift(); //shift removes first element\n    }\n\n    this.shrinkBalls(this.balls);\n    for (var i = 0; i < this.length; i++) {\n      if (this.balls[i]) {\n        this.balls[i].move();\n        this.renderCircleOfTrail(svg, this.balls[i]);\n      }\n    }\n  }\n\n  renderCircleOfTrail(svg, ball) {\n    let circle = document.createElementNS(SVG_NS, \"circle\");\n    circle.setAttributeNS(null, \"r\", ball.radius);\n    circle.setAttributeNS(null, \"cx\", ball.x);\n    circle.setAttributeNS(null, \"cy\", ball.y);\n    circle.setAttributeNS(null, \"fill\", getRandomColor());\n    svg.appendChild(circle);\n  }\n\n  //Makes the trail shorter at the end\n  shrinkBalls(balls) {\n    for (var j = balls.length - 1; j > 0; j--) {\n      balls[j].radius -= j * 0.002;\n      if (balls[j].radius < 0) {\n        balls[j].radius = 0;\n      }\n    }\n  }\n}\n\n//Was creating Balls from ball class but they hurt the framerate too much and had velocities\nclass TrailBall {\n  constructor(x, y, radius, velocity) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.velocity = velocity;\n    this.acceleration = -0.01;\n  }\n\n  move() {\n    this.x += this.velocity[0];\n    this.y += this.velocity[1];\n  }\n}\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import { SVG_NS } from \"../settings\";\nimport pingSound from \"../../public/sounds/smack.ogg\";\nimport Trail from \"./trail\";\n\nexport default class Ball {\n  constructor(radius, boardLength, boardHeight, velocity) {\n    this.radius = radius;\n    this.boardLength = boardLength;\n    this.boardHeight = boardHeight;\n    this.velocity = velocity;\n    this.speed = Math.sqrt(\n      this.velocity[0] * this.velocity[0] + this.velocity[1] * this.velocity[1]\n    );\n    this.startingSpeed = this.speed;\n    this.theta = 0;\n    this.xFlipped = 1;\n    this.yFlipped = 1;\n\n    this.spinSpeed = 0;\n    this.accelerationSpeed = 0.3;\n\n    //Pass in the number of circles used to make the trail\n    this.trail = new Trail(80);\n    this.ping = new Audio(pingSound);\n    this.direction = 1;\n    this.reset();\n  }\n\n  render(svg, paddle1, paddle2) {\n    this.trail.render(svg, this);\n    this.wallCollision();\n    this.move();\n    this.paddleCollision(paddle1, paddle2);\n\n    let circle = document.createElementNS(SVG_NS, \"circle\");\n    circle.setAttributeNS(null, \"class\", this.className);\n    circle.setAttributeNS(null, \"r\", this.radius);\n    circle.setAttributeNS(null, \"cx\", this.x);\n    circle.setAttributeNS(null, \"cy\", this.y);\n    circle.setAttributeNS(null, \"fill\", \"white\");\n\n    svg.appendChild(circle);\n\n    const rightGoal = this.x + this.radius >= this.boardLength;\n    const leftGoal = this.x - this.radius <= 0;\n\n    if (rightGoal) {\n      this.goal(paddle1);\n      this.direction = 1;\n    } else if (leftGoal) {\n      this.goal(paddle2);\n      this.direction = -1;\n    }\n  }\n\n  move() {\n    this.spin();\n    this.velocity[0] = this.speed * this.xFlipped * Math.cos(this.theta);\n    this.velocity[1] = this.speed * this.yFlipped * Math.sin(this.theta);\n    this.x += this.velocity[0];\n    this.y += this.velocity[1];\n  }\n\n  accelerate() {\n    this.speed += this.accelerationSpeed;\n  }\n\n  wallCollision() {\n    const hitTop = this.y - this.radius <= 0;\n    const hitBottom = this.y + this.radius >= this.boardHeight;\n\n    if (hitTop || hitBottom) {\n      this.yFlipped = -this.yFlipped;\n    }\n  }\n\n  paddleCollision(player1, player2) {\n    //Collision detection for right paddle\n    if (\n      this.x + this.radius >= player2.x &&\n      this.x + this.radius <= player2.x + player2.width\n    ) {\n      if (this.y >= player2.y && this.y <= player2.y + player2.height) {\n        this.theta += Math.PI;\n        this.yFlipped = -this.yFlipped;\n        this.ping.play();\n        this.applySpin(player2.speed);\n      }\n    }\n    //Collision detection for left paddle\n    if (\n      this.x - this.radius <= player1.x + player1.width &&\n      this.x - this.radius >= player1.x &&\n      (this.y >= player1.y && this.y <= player1.y + player1.height)\n    ) {\n      this.theta += Math.PI / 2;\n      this.yFlipped = -this.yFlipped;\n      this.ping.play();\n      this.applySpin(player1.speed);\n    }\n  }\n\n  //Slowly reduces spin speed to simulate air friction on the rotation\n  applyRotationalFrictionToZero() {\n    if (this.spinSpeed > 0) {\n      this.spinSpeed -= 0.1;\n    } else if (this.spinSpeed < 0) {\n      this.spinSpeed += 0.1;\n    }\n  }\n\n  //Adds spinSpeed to the ball based on speed of paddle on impact\n  applySpin(paddleSpeed) {\n    this.spinSpeed += paddleSpeed;\n  }\n\n  //Changes the direction the ball is going based on the spinSpeed\n  spin() {\n    this.theta += this.spinSpeed * 0.001;\n    this.applyRotationalFrictionToZero();\n  }\n\n  //Resets ball to the center\n  reset() {\n    this.theta = Math.random() * Math.PI;\n    if (this.theta > Math.PI / 4 && this.theta < (3 * Math.PI) / 4) {\n      this.theta += Math.PI / 2;\n    } else if (\n      this.theta > (5 * Math.PI) / 4 &&\n      this.theta < (7 * Math.PI) / 4\n    ) {\n      this.theta += Math.PI / 2;\n    }\n    this.speed = this.startingSpeed;\n    this.spinSpeed = 0;\n    this.x = this.boardLength / 2;\n    this.y = this.boardHeight / 2;\n  }\n\n  goal(player) {\n    this.direction *= -1;\n    this.reset();\n    player.score++;\n  }\n}\n","import { SVG_NS } from \"../settings\";\n\nexport default class Score {\n  constructor(x, y, size) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n  }\n\n  render(svg, score) {\n    let text = document.createElementNS(SVG_NS, \"text\");\n    text.setAttributeNS(null, \"x\", this.x);\n    text.setAttributeNS(null, \"y\", this.y);\n    text.setAttributeNS(null, \"size\", this.size);\n    text.setAttributeNS(null, \"fill\", \"blue\");\n    text.textContent = score;\n    svg.appendChild(text);\n  }\n}\n","import Board from \"./board\";\nimport { SVG_NS } from \"../settings\";\nimport Paddle from \"./paddle\";\nimport Ball from \"./ball\";\nimport Score from \"./score\";\nimport { KEYS } from \"../settings\";\n\nconst paddleHeight = 80;\nconst paddleWidth = 8;\nconst paddlePadding = 30;\nconst boardClassName = \"board\";\nconst ballRadius = 8;\nconst ballVelocity = [5, 2];\nconst p1Up = KEYS.a;\nconst p1Down = KEYS.z;\nconst p2Up = KEYS.up;\nconst p2Down = KEYS.down;\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    this.direction = 1;\n    const boardHeight = this.height;\n    const boardLength = this.width;\n\n    let paused = true;\n\n    this.gameElement = document.getElementById(this.element);\n\n    this.board = new Board(boardLength, boardHeight, boardClassName);\n\n    this.paddle1 = new Paddle(\n      boardHeight,\n      paddleWidth,\n      paddleHeight,\n      paddlePadding,\n      boardHeight / 2,\n      p1Up,\n      p1Down\n    );\n    this.paddle2 = new Paddle(\n      boardHeight,\n      paddleWidth,\n      paddleHeight,\n      boardLength - paddlePadding - paddleWidth / 2,\n      boardHeight / 2,\n      p2Up,\n      p2Down\n    );\n\n    this.ball = new Ball(ballRadius, boardLength, boardHeight, ballVelocity);\n\n    this.score1 = new Score(this.width / 2 - 50, 30, 30);\n    this.score2 = new Score(this.width / 2 + 25, 30, 30);\n\n    document.addEventListener(\"keydown\", event => {\n      switch (event.key) {\n        case KEYS.spaceBar:\n          this.paused = !this.paused;\n          break;\n      }\n    });\n  } //End of CONSTRUCTOR\n\n  render() {\n    if (this.paused) {\n      return;\n    }\n    this.gameElement.innerHTML = \"\";\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n\n    this.board.render(svg);\n    this.score1.render(svg, this.paddle1.score);\n    this.score2.render(svg, this.paddle2.score);\n    this.paddle1.render(svg);\n    this.paddle2.render(svg);\n    this.ball.render(svg, this.paddle1, this.paddle2);\n  }\n}\n","import \"./styles/game.css\";\nimport Game from \"./partials/Game\";\n\n// create a game instance\nconst game = new Game(\"game\", 800, 400);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}