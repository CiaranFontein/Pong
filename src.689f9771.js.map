{"version":3,"sources":["src/settings.js","src/partials/board.js","src/partials/paddle.js","src/partials/trail.js","src/partials/ball.js","src/partials/score.js","src/partials/Game.js","src/index.js"],"names":["KEYS","a","z","up","down","spaceBar","SVG_NS","Board","width","height","className","svg","rect","document","createElementNS","setAttributeNS","line","appendChild","paddleAcceleration","Paddle","boardHeight","x","y","upKey","downKey","speed","score","againstTopEdge","againstBotEdge","keyState","addEventListener","event","key","update","move","force","slowToZero","Trail","length","balls","ball","push","TrailBall","radius","shift","shrinkBalls","i","renderCircleOfTrail","circle","j","Ball","boardLength","velocity","Math","sqrt","startingSpeed","theta","xFlipped","yFlipped","spinSpeed","accelerationSpeed","trail","ping","Audio","pingSound","direction","reset","paddle1","paddle2","render","wallCollision","paddleCollision","rightGoal","leftGoal","goal","spin","cos","sin","hitTop","hitBottom","player1","player2","PI","play","applySpin","paddleSpeed","applyRotationalFrictionToZero","random","player","Score","size","text","textContent","paddleHeight","paddleWidth","paddlePadding","boardClassName","ballRadius","ballVelocity","p1Up","p1Down","p2Up","p2Down","Game","element","gameElement","getElementById","board","score1","score2","paused","innerHTML","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.689f9771.js","sourceRoot":"..","sourcesContent":["export const KEYS = {\n  a: \"a\", // player 1 up key\n  z: \"z\", // player 1 down key\n  up: \"ArrowUp\", // player 2 up key\n  down: \"ArrowDown\", // player 2 down key\n  spaceBar: \" \" // we'll use this later...\n};\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n  constructor(width, height, className) {\n    this.width = width;\n    this.height = height;\n    this.className = className;\n  }\n\n  render(svg) {\n    let rect = document.createElementNS(SVG_NS, \"rect\");\n    rect.setAttributeNS(null, \"class\", this.className);\n    rect.setAttributeNS(null, \"width\", this.width);\n    rect.setAttributeNS(null, \"height\", this.height);\n\n    let line = document.createElementNS(SVG_NS, \"line\");\n    line.setAttributeNS(null, \"x1\", this.width / 2);\n    line.setAttributeNS(null, \"x2\", this.width / 2);\n    line.setAttributeNS(null, \"y1\", 0);\n    line.setAttributeNS(null, \"y2\", this.height);\n    line.setAttributeNS(null, \"stroke\", \"white\");\n    line.setAttributeNS(null, \"stroke-dasharray\", \"20\");\n    line.setAttributeNS(null, \"stroke-width\", \"4\");\n\n    svg.appendChild(rect);\n    svg.appendChild(line);\n  }\n}\n","import { SVG_NS, KEYS } from \"../settings\";\n\nlet paddleAcceleration = 0.5;\n\nexport default class Paddle {\n  constructor(boardHeight, width, height, x, y, upKey, downKey) {\n    this.boardHeight = boardHeight;\n    this.width = width;\n    this.height = height;\n    this.x = x;\n    this.y = y;\n    this.speed = 0;\n    this.score = 0;\n    this.upKey = upKey;\n    this.downKey = downKey;\n    this.againstTopEdge = false;\n    this.againstBotEdge = false;\n\n    this.keyState = {};\n\n    document.addEventListener(\"keydown\", event => {\n      this.keyState[event.key] = true;\n    });\n\n    document.addEventListener(\"keyup\", event => {\n      this.keyState[event.key] = false;\n    });\n  }\n\n  render(svg) {\n    this.update();\n    if (\n      this.keyState[KEYS.a] &&\n      this.upKey === KEYS.a &&\n      !this.againstTopEdge\n    ) {\n      this.move(-paddleAcceleration);\n    }\n    if (\n      this.keyState[KEYS.up] &&\n      this.upKey === KEYS.up &&\n      !this.againstTopEdge\n    ) {\n      this.move(-paddleAcceleration);\n    }\n\n    if (\n      this.keyState[KEYS.z] &&\n      this.downKey === KEYS.z &&\n      !this.againstBotEdge\n    ) {\n      this.move(paddleAcceleration);\n    }\n\n    if (\n      this.keyState[KEYS.down] &&\n      this.downKey === KEYS.down &&\n      !this.againstBotEdge\n    ) {\n      this.move(paddleAcceleration);\n    }\n\n    let rect = document.createElementNS(SVG_NS, \"rect\");\n    rect.setAttributeNS(null, \"class\", this.className);\n    rect.setAttributeNS(null, \"width\", this.width);\n    rect.setAttributeNS(null, \"height\", this.height);\n    rect.setAttributeNS(null, \"x\", this.x);\n    rect.setAttributeNS(null, \"y\", this.y);\n    rect.setAttributeNS(null, \"speed\", this.speed);\n    rect.setAttributeNS(null, \"score\", this.score);\n    rect.setAttributeNS(null, \"fill\", \"white\");\n\n    svg.appendChild(rect);\n  }\n\n  move(force) {\n    this.speed += force;\n  }\n\n  update() {\n    if (this.y + this.speed <= 0) {\n      this.againstTopEdge = true;\n      this.speed = -this.speed * 0.5;\n    } else if (this.y + this.speed >= this.boardHeight - this.height) {\n      this.againstBotEdge = true;\n      this.speed = -this.speed * 0.5;\n    } else {\n      this.againstBotEdge = false;\n      this.againstTopEdge = false;\n      this.y += this.speed;\n    }\n    this.slowToZero();\n  }\n\n  slowToZero() {\n    if (this.speed > 0) {\n      this.speed -= 0.05;\n    } else if (this.speed < 0) {\n      this.speed += 0.05;\n    }\n  }\n}\n","import { SVG_NS } from \"../settings\";\n\nexport default class Trail {\n  constructor(length) {\n    this.length = length;\n    this.balls = [];\n  }\n\n  render(svg, ball) {\n    //Creates new TrailBall at location of ball\n    this.balls.push(new TrailBall(ball.x, ball.y, ball.radius));\n    if (this.balls.length > this.length) {\n      this.balls.shift(); //shift removes first element\n    }\n\n    this.shrinkBalls(this.balls);\n    for (var i = 0; i < this.length; i++) {\n      if (this.balls[i]) {\n        this.renderCircleOfTrail(svg, this.balls[i]);\n      }\n    }\n  }\n\n  renderCircleOfTrail(svg, ball) {\n    let circle = document.createElementNS(SVG_NS, \"circle\");\n    circle.setAttributeNS(null, \"r\", ball.radius);\n    circle.setAttributeNS(null, \"cx\", ball.x);\n    circle.setAttributeNS(null, \"cy\", ball.y);\n    circle.setAttributeNS(null, \"fill\", \"red\");\n    svg.appendChild(circle);\n  }\n\n  //Makes the trail shorter at the end\n  shrinkBalls(balls) {\n    for (var j = balls.length - 1; j > 0; j--) {\n      balls[j].radius = (j / this.length) * 10;\n      if (balls[j].radius < 0) {\n        balls[j].radius = 0;\n      }\n    }\n  }\n}\n\n//Was creating Balls from ball class but they hurt the framerate too much and had velocities\nclass TrailBall {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n}\n","import { SVG_NS } from \"../settings\";\nimport pingSound from \"../../public/sounds/smack.ogg\";\nimport Trail from \"./trail\";\n\nexport default class Ball {\n  constructor(radius, boardLength, boardHeight, velocity) {\n    this.radius = radius;\n    this.boardLength = boardLength;\n    this.boardHeight = boardHeight;\n    this.velocity = velocity;\n    this.speed = Math.sqrt(\n      this.velocity[0] * this.velocity[0] + this.velocity[1] * this.velocity[1]\n    );\n    this.startingSpeed = this.speed;\n    this.theta = 0;\n    this.xFlipped = 1;\n    this.yFlipped = 1;\n\n    this.spinSpeed = 0;\n    this.accelerationSpeed = 0.1;\n\n    //Pass in the number of circles used to make the trail\n    this.trail = new Trail(30);\n    this.ping = new Audio(pingSound);\n    this.direction = 1;\n    this.reset();\n  }\n\n  render(svg, paddle1, paddle2) {\n    this.trail.render(svg, this);\n    this.wallCollision();\n    this.move();\n    this.paddleCollision(paddle1, paddle2);\n\n    let circle = document.createElementNS(SVG_NS, \"circle\");\n    circle.setAttributeNS(null, \"class\", this.className);\n    circle.setAttributeNS(null, \"r\", this.radius);\n    circle.setAttributeNS(null, \"cx\", this.x);\n    circle.setAttributeNS(null, \"cy\", this.y);\n    circle.setAttributeNS(null, \"fill\", \"white\");\n\n    svg.appendChild(circle);\n\n    const rightGoal = this.x + this.radius >= this.boardLength;\n    const leftGoal = this.x - this.radius <= 0;\n\n    if (rightGoal) {\n      this.goal(paddle1);\n      this.direction = 1;\n    } else if (leftGoal) {\n      this.goal(paddle2);\n      this.direction = -1;\n    }\n  }\n\n  move() {\n    this.spin();\n    this.velocity[0] = this.speed * this.xFlipped * Math.cos(this.theta);\n    this.velocity[1] = this.speed * this.yFlipped * Math.sin(this.theta);\n    this.x += this.velocity[0];\n    this.y += this.velocity[1];\n  }\n\n  accelerate() {\n    this.speed += this.accelerationSpeed;\n  }\n\n  wallCollision() {\n    const hitTop = this.y - this.radius <= 0;\n    const hitBottom = this.y + this.radius >= this.boardHeight;\n\n    if (hitTop || hitBottom) {\n      this.yFlipped = -this.yFlipped;\n    }\n  }\n\n  paddleCollision(player1, player2) {\n    //Collision detection for right paddle\n    if (\n      this.x + this.radius >= player2.x &&\n      this.x + this.radius <= player2.x + player2.width\n    ) {\n      if (this.y >= player2.y && this.y <= player2.y + player2.height) {\n        this.theta += Math.PI;\n        this.yFlipped = -this.yFlipped;\n        this.ping.play();\n        this.applySpin(player2.speed);\n      }\n    }\n    //Collision detection for left paddle\n    if (\n      this.x - this.radius <= player1.x + player1.width &&\n      this.x - this.radius >= player1.x &&\n      (this.y >= player1.y && this.y <= player1.y + player1.height)\n    ) {\n      this.theta += Math.PI / 2;\n      this.yFlipped = -this.yFlipped;\n      this.ping.play();\n      this.applySpin(player1.speed);\n    }\n  }\n\n  //Slowly reduces spin speed to simulate air friction on the rotation\n  applyRotationalFrictionToZero() {\n    if (this.spinSpeed > 0) {\n      this.spinSpeed -= 0.1;\n    } else if (this.spinSpeed < 0) {\n      this.spinSpeed += 0.1;\n    }\n  }\n\n  //Adds spinSpeed to the ball based on speed of paddle on impact\n  applySpin(paddleSpeed) {\n    this.spinSpeed += paddleSpeed;\n  }\n\n  //Changes the direction the ball is going based on the spinSpeed\n  spin() {\n    this.theta += this.spinSpeed * 0.001;\n    this.applyRotationalFrictionToZero();\n  }\n\n  //Resets ball to the center\n  reset() {\n    this.theta = this.direction * Math.random() * (Math.PI / 2) + Math.PI / 2;\n    this.speed = this.startingSpeed;\n    this.spinSpeed = 0;\n    this.x = this.boardLength / 2;\n    this.y = this.boardHeight / 2;\n  }\n\n  goal(player) {\n    this.direction *= -1;\n    this.reset();\n    player.score++;\n  }\n}\n","import { SVG_NS } from \"../settings\";\n\nexport default class Score {\n  constructor(x, y, size) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n  }\n\n  render(svg, score) {\n    let text = document.createElementNS(SVG_NS, \"text\");\n    text.setAttributeNS(null, \"x\", this.x);\n    text.setAttributeNS(null, \"y\", this.y);\n    text.setAttributeNS(null, \"size\", this.size);\n    text.setAttributeNS(null, \"fill\", \"blue\");\n    text.textContent = score;\n    svg.appendChild(text);\n  }\n}\n","import Board from \"./board\";\nimport { SVG_NS } from \"../settings\";\nimport Paddle from \"./paddle\";\nimport Ball from \"./ball\";\nimport Score from \"./score\";\nimport { KEYS } from \"../settings\";\n\nconst paddleHeight = 80;\nconst paddleWidth = 8;\nconst paddlePadding = 30;\nconst boardClassName = \"board\";\nconst ballRadius = 8;\nconst ballVelocity = [5, 2];\nconst p1Up = KEYS.a;\nconst p1Down = KEYS.z;\nconst p2Up = KEYS.up;\nconst p2Down = KEYS.down;\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    this.direction = 1;\n    const boardHeight = this.height;\n    const boardLength = this.width;\n\n    let paused = true;\n\n    this.gameElement = document.getElementById(this.element);\n\n    this.board = new Board(boardLength, boardHeight, boardClassName);\n\n    this.paddle1 = new Paddle(\n      boardHeight,\n      paddleWidth,\n      paddleHeight,\n      paddlePadding,\n      boardHeight / 2,\n      p1Up,\n      p1Down\n    );\n    this.paddle2 = new Paddle(\n      boardHeight,\n      paddleWidth,\n      paddleHeight,\n      boardLength - paddlePadding - paddleWidth / 2,\n      boardHeight / 2,\n      p2Up,\n      p2Down\n    );\n\n    this.ball = new Ball(ballRadius, boardLength, boardHeight, ballVelocity);\n\n    this.score1 = new Score(this.width / 2 - 50, 30, 30);\n    this.score2 = new Score(this.width / 2 + 25, 30, 30);\n\n    document.addEventListener(\"keydown\", event => {\n      switch (event.key) {\n        case KEYS.spaceBar:\n          this.paused = !this.paused;\n          break;\n      }\n    });\n  } //End of CONSTRUCTOR\n\n  render() {\n    if (this.paused) {\n      return;\n    }\n    this.gameElement.innerHTML = \"\";\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n\n    this.board.render(svg);\n    this.score1.render(svg, this.paddle1.score);\n    this.score2.render(svg, this.paddle2.score);\n    this.paddle1.render(svg);\n    this.paddle2.render(svg);\n    this.ball.render(svg, this.paddle1, this.paddle2);\n  }\n}\n","import \"./styles/game.css\";\nimport Game from \"./partials/Game\";\nimport { KEYS } from \"./settings\";\n\n// create a game instance\nconst game = new Game(\"game\", 800, 400);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}